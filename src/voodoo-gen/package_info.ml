module Input = struct
  (* File generated by package_info.ml in voodoo-do *)
  type library = {
    name : string;
    modules : string list;
    dependencies : string list option;
  }

  type info = { libraries : library list }

  let library_of_yojson json =
    let open Yojson.Basic.Util in
    let name = json |> member "name" |> to_string in
    let modules = json |> member "modules" |> to_list |> List.map to_string in
    let dependencies =
      try
        json |> member "dependencies" |> to_list |> List.map to_string
        |> Option.some
      with Type_error _ -> None
    in
    { name; modules; dependencies }

  let info_of_yojson json =
    let open Yojson.Basic.Util in
    let libraries =
      json |> member "libraries" |> to_list |> List.map library_of_yojson
    in
    { libraries }
end

type modul = {
  name : string;
  submodules : modul list;
  kind : Odoc_document.Url.Path.kind;
}

type library = {
  name : string;
  dependencies : string list option;
  modules : modul list;
}

type info = { libraries : library list }

let rec modul_to_yojson { name; kind; submodules } =
  let name = ("name", `String name) in
  let submodules =
    ("submodules", `List (List.map modul_to_yojson submodules))
  in
  let kind = ("kind", `String (Odoc_document.Url.Path.string_of_kind kind)) in
  `Assoc [ name; submodules; kind ]

let library_to_yojson { name; modules; dependencies } =
  let list_string v = `List (List.map (fun m -> `String m) v) in
  let name = ("name", `String name) in
  let modules = ("modules", `List (List.map modul_to_yojson modules)) in
  let dependencies =
    match dependencies with
    | None -> []
    | Some dependencies -> [ ("dependencies", list_string dependencies) ]
  in
  `Assoc (name :: modules :: dependencies)

let info_to_yojson { libraries } =
  `Assoc [ ("libraries", `List (List.map library_to_yojson libraries)) ]

module StringMap = Map.Make (String)

let info_of_paths ~(info : Input.info) paths =
  let children = ref StringMap.empty in
  let kind = ref StringMap.empty in
  let path_to_string v =
    v |> Odoc_document.Url.Path.to_list |> List.map snd |> String.concat "."
  in
  List.iter
    (fun (page : Odoc_document.Types.Page.t) ->
      let path = page.url in
      kind := StringMap.add path.name path.kind !kind;
      Option.iter
        (fun (parent : Odoc_document.Url.Path.t) ->
          children :=
            StringMap.update (path_to_string parent)
              (function
                | None -> Some [ path.name ] | Some v -> Some (path.name :: v))
              !children)
        path.parent)
    paths;
  let rec get_tree root =
    let children =
      StringMap.find_opt root !children |> Option.value ~default:[]
    in
    let kind = StringMap.find root !kind in
    let submodules = List.map (fun c -> get_tree (root ^ "." ^ c)) children in
    { name = root; kind; submodules }
  in
  List.map
    (fun ({ name; modules; dependencies } : Input.library) ->
      let modules =
        List.filter_map
          (fun t -> try Some (get_tree t) with Not_found -> None)
          modules
      in
      { name; modules; dependencies })
    info.libraries

let gen ~input ~output paths =
  let input = Fpath.(parent input / "package.json" |> to_string) in
  let info = Input.info_of_yojson (Yojson.Basic.from_file input) in
  let libraries = info_of_paths ~info paths in
  let _ = Bos.OS.Dir.create output |> Result.get_ok in
  let output = Fpath.(to_string (output / "package.json")) in
  Yojson.Basic.to_file output (info_to_yojson { libraries })
